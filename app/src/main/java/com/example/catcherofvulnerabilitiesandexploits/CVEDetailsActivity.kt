package com.example.catcherofvulnerabilitiesandexploits

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import android.widget.TextView

class CVEDetailsActivity : AppCompatActivity() {

    private lateinit var btnBack: Button;

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_details_cve)

        val id = intent.getStringExtra("id")
        val datePublished = intent.getStringExtra("date_published")
        val dateLastModified = intent.getStringExtra("date_last_modified")
        val vulnerabilityStatus = intent.getStringExtra("vulnerability_status")
        val impactScore = intent.getStringExtra("impact_score")?.toDouble()!!
        val impactScoreStr = intent.getStringExtra("impact_score")
        val description = intent.getStringExtra("description")

        val displayId = findViewById<TextView>(R.id.a_cve_details_id)
        displayId.text = id

        val displayDatePublished = findViewById<TextView>(R.id.a_cve_details_date_published)
        displayDatePublished.text = "Published : $datePublished"

        val displayDateLastModified = findViewById<TextView>(R.id.a_cve_details_date_last_modified)
        displayDateLastModified.text = "Last modified : $dateLastModified"

        val displayVulnerabilityStatus = findViewById<TextView>(R.id.a_cve_details_vulnerability_status)
        displayVulnerabilityStatus.text = "Status : $vulnerabilityStatus"

        val displayImpactScore = findViewById<TextView>(R.id.a_cve_details_impact_score)
        displayImpactScore.text = "Impact score : $impactScoreStr"

        val displayDescription = findViewById<TextView>(R.id.a_cve_details_description)
        displayDescription.text = "description : $description"

        findViewById<View>(R.id.iconMinor).setVisibility(View.INVISIBLE);
        findViewById<View>(R.id.iconModerate).setVisibility(View.INVISIBLE);
        findViewById<View>(R.id.iconMajor).setVisibility(View.INVISIBLE);
        findViewById<View>(R.id.iconCritical).setVisibility(View.INVISIBLE);
        Log.d("baseScore value", impactScore.toString())
        if (impactScore < 3.0) {
            findViewById<View>(R.id.iconMinor).setVisibility(View.VISIBLE);
        } else if (impactScore < 6.0) {
            findViewById<View>(R.id.iconModerate).setVisibility(View.VISIBLE);
        } else if (impactScore < 9.0) {
            findViewById<View>(R.id.iconMajor).setVisibility(View.VISIBLE);
        } else {
            findViewById<View>(R.id.iconCritical).setVisibility(View.VISIBLE);
        }

        btnBack = findViewById(R.id.a_details_cve_btn_back)
        btnBack.setOnClickListener {
            setResult(RESULT_OK, intent)
            finish()
        }
    }
}
